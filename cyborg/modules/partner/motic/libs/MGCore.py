# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MGCore
else:
    import _MGCore

import builtins as __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MGCore.delete_SwigPyIterator

    def value(self):
        return _MGCore.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MGCore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MGCore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MGCore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MGCore.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MGCore.SwigPyIterator_copy(self)

    def next(self):
        return _MGCore.SwigPyIterator_next(self)

    def __next__(self):
        return _MGCore.SwigPyIterator___next__(self)

    def previous(self):
        return _MGCore.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MGCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MGCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MGCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MGCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MGCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MGCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MGCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MGCore:
_MGCore.SwigPyIterator_swigregister(SwigPyIterator)

MG_TaskStatus_STARTED = _MGCore.MG_TaskStatus_STARTED
MG_TaskStatus_PROCESSING = _MGCore.MG_TaskStatus_PROCESSING
MG_TaskStatus_ABORTED = _MGCore.MG_TaskStatus_ABORTED
MG_TaskStatus_FINISHED = _MGCore.MG_TaskStatus_FINISHED
MG_TaskStatus_FAILED = _MGCore.MG_TaskStatus_FAILED
class MG_SlideLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = property(_MGCore.MG_SlideLayer_rows_get, _MGCore.MG_SlideLayer_rows_set)
    columns = property(_MGCore.MG_SlideLayer_columns_get, _MGCore.MG_SlideLayer_columns_set)
    scale = property(_MGCore.MG_SlideLayer_scale_get, _MGCore.MG_SlideLayer_scale_set)
    objective = property(_MGCore.MG_SlideLayer_objective_get, _MGCore.MG_SlideLayer_objective_set)

    def __init__(self):
        _MGCore.MG_SlideLayer_swiginit(self, _MGCore.new_MG_SlideLayer())
    __swig_destroy__ = _MGCore.delete_MG_SlideLayer

# Register MG_SlideLayer in _MGCore:
_MGCore.MG_SlideLayer_swigregister(MG_SlideLayer)

MG_SlideAnnotationType_ANGLE = _MGCore.MG_SlideAnnotationType_ANGLE
MG_SlideAnnotationType_ARC = _MGCore.MG_SlideAnnotationType_ARC
MG_SlideAnnotationType_ARROW = _MGCore.MG_SlideAnnotationType_ARROW
MG_SlideAnnotationType_CIRCLE = _MGCore.MG_SlideAnnotationType_CIRCLE
MG_SlideAnnotationType_CIRCLE3P = _MGCore.MG_SlideAnnotationType_CIRCLE3P
MG_SlideAnnotationType_CURVE = _MGCore.MG_SlideAnnotationType_CURVE
MG_SlideAnnotationType_CURVECLOSED = _MGCore.MG_SlideAnnotationType_CURVECLOSED
MG_SlideAnnotationType_ELLIPSE = _MGCore.MG_SlideAnnotationType_ELLIPSE
MG_SlideAnnotationType_LINE = _MGCore.MG_SlideAnnotationType_LINE
MG_SlideAnnotationType_POLYGON = _MGCore.MG_SlideAnnotationType_POLYGON
MG_SlideAnnotationType_POSITION = _MGCore.MG_SlideAnnotationType_POSITION
MG_SlideAnnotationType_RECTANGLE = _MGCore.MG_SlideAnnotationType_RECTANGLE
MG_SlideAnnotationType_TEXT = _MGCore.MG_SlideAnnotationType_TEXT
MG_SlideAnnotationType_MARQUEERECTANGLE = _MGCore.MG_SlideAnnotationType_MARQUEERECTANGLE
MG_SlideAnnotationType_MARQUEEPOLYGON = _MGCore.MG_SlideAnnotationType_MARQUEEPOLYGON
MG_SlideAnnotationType_MARQUEECURVECLOSED = _MGCore.MG_SlideAnnotationType_MARQUEECURVECLOSED
MG_SlideAnnotationType_IGNORED = _MGCore.MG_SlideAnnotationType_IGNORED
MG_ImageFormat_RGB24 = _MGCore.MG_ImageFormat_RGB24
MG_ImageFormat_JPEG = _MGCore.MG_ImageFormat_JPEG
MG_ImageFormat_PNG = _MGCore.MG_ImageFormat_PNG
class MG_SlideROI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rgb = property(_MGCore.MG_SlideROI_rgb_get, _MGCore.MG_SlideROI_rgb_set)
    layer = property(_MGCore.MG_SlideROI_layer_get, _MGCore.MG_SlideROI_layer_set)
    left = property(_MGCore.MG_SlideROI_left_get, _MGCore.MG_SlideROI_left_set)
    top = property(_MGCore.MG_SlideROI_top_get, _MGCore.MG_SlideROI_top_set)
    width = property(_MGCore.MG_SlideROI_width_get, _MGCore.MG_SlideROI_width_set)
    height = property(_MGCore.MG_SlideROI_height_get, _MGCore.MG_SlideROI_height_set)
    pitch = property(_MGCore.MG_SlideROI_pitch_get, _MGCore.MG_SlideROI_pitch_set)

    def copyRGBBuffer(self, buf):
        return _MGCore.MG_SlideROI_copyRGBBuffer(self, buf)

    def __init__(self):
        _MGCore.MG_SlideROI_swiginit(self, _MGCore.new_MG_SlideROI())
    __swig_destroy__ = _MGCore.delete_MG_SlideROI

# Register MG_SlideROI in _MGCore:
_MGCore.MG_SlideROI_swigregister(MG_SlideROI)

class MG_SlideOverlay(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regionX = property(_MGCore.MG_SlideOverlay_regionX_get, _MGCore.MG_SlideOverlay_regionX_set)
    regionY = property(_MGCore.MG_SlideOverlay_regionY_get, _MGCore.MG_SlideOverlay_regionY_set)
    regionWidth = property(_MGCore.MG_SlideOverlay_regionWidth_get, _MGCore.MG_SlideOverlay_regionWidth_set)
    regionHeight = property(_MGCore.MG_SlideOverlay_regionHeight_get, _MGCore.MG_SlideOverlay_regionHeight_set)
    dataFormat = property(_MGCore.MG_SlideOverlay_dataFormat_get, _MGCore.MG_SlideOverlay_dataFormat_set)
    data = property(_MGCore.MG_SlideOverlay_data_get, _MGCore.MG_SlideOverlay_data_set)
    dataSize = property(_MGCore.MG_SlideOverlay_dataSize_get, _MGCore.MG_SlideOverlay_dataSize_set)

    def __init__(self, x, y, w, h, fmt, buf):
        _MGCore.MG_SlideOverlay_swiginit(self, _MGCore.new_MG_SlideOverlay(x, y, w, h, fmt, buf))
    __swig_destroy__ = _MGCore.delete_MG_SlideOverlay

# Register MG_SlideOverlay in _MGCore:
_MGCore.MG_SlideOverlay_swigregister(MG_SlideOverlay)


def MG_GetHost():
    return _MGCore.MG_GetHost()

def MG_SetHost(host):
    return _MGCore.MG_SetHost(host)

def MG_SetCredential(appId, secretKey):
    return _MGCore.MG_SetCredential(appId, secretKey)

def MG_SetTaskStatus(taskId, status):
    return _MGCore.MG_SetTaskStatus(taskId, status)

def MG_SetTaskSubProgress(taskId, percent):
    return _MGCore.MG_SetTaskSubProgress(taskId, percent)

def MG_ClearTaskCache(taskId=None):
    return _MGCore.MG_ClearTaskCache(taskId)

def MG_GetSlideLayer(taskId, slideId, objective):
    return _MGCore.MG_GetSlideLayer(taskId, slideId, objective)

def MG_SetSlideTileCacheHome(dir):
    return _MGCore.MG_SetSlideTileCacheHome(dir)

def MG_AllocateSlideROIByRegion(layerIndex, regionX, regionY, regionWidth, regionHeight, roi, align=True, bg=255):
    return _MGCore.MG_AllocateSlideROIByRegion(layerIndex, regionX, regionY, regionWidth, regionHeight, roi, align, bg)

def MG_AllocateSlideROIByTile(slideId, layerIndex, tileX, tileY, countX, countY, roi, align=True, bg=255):
    return _MGCore.MG_AllocateSlideROIByTile(slideId, layerIndex, tileX, tileY, countX, countY, roi, align, bg)

def MG_GetSlideROI(taskId, slideId, roi, tileTimeout=15):
    return _MGCore.MG_GetSlideROI(taskId, slideId, roi, tileTimeout)

def MG_ReleaseSlideROI(roi):
    return _MGCore.MG_ReleaseSlideROI(roi)

def MG_SetTaskMainProgress(taskId, percent, desc_ZH_CN, desc_EN):
    return _MGCore.MG_SetTaskMainProgress(taskId, percent, desc_ZH_CN, desc_EN)

def MG_AddTaskFile(taskId, name, fileSize, buf):
    return _MGCore.MG_AddTaskFile(taskId, name, fileSize, buf)
class PMG_TaskROI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_MGCore.PMG_TaskROI_id_get, _MGCore.PMG_TaskROI_id_set)
    slideId = property(_MGCore.PMG_TaskROI_slideId_get, _MGCore.PMG_TaskROI_slideId_set)
    left = property(_MGCore.PMG_TaskROI_left_get, _MGCore.PMG_TaskROI_left_set)
    top = property(_MGCore.PMG_TaskROI_top_get, _MGCore.PMG_TaskROI_top_set)
    width = property(_MGCore.PMG_TaskROI_width_get, _MGCore.PMG_TaskROI_width_set)
    height = property(_MGCore.PMG_TaskROI_height_get, _MGCore.PMG_TaskROI_height_set)
    isWSI = property(_MGCore.PMG_TaskROI_isWSI_get, _MGCore.PMG_TaskROI_isWSI_set)
    isLocked = property(_MGCore.PMG_TaskROI_isLocked_get, _MGCore.PMG_TaskROI_isLocked_set)
    slideAlias = property(_MGCore.PMG_TaskROI_slideAlias_get, _MGCore.PMG_TaskROI_slideAlias_set)
    name = property(_MGCore.PMG_TaskROI_name_get, _MGCore.PMG_TaskROI_name_set)
    description = property(_MGCore.PMG_TaskROI_description_get, _MGCore.PMG_TaskROI_description_set)

    def __init__(self):
        _MGCore.PMG_TaskROI_swiginit(self, _MGCore.new_PMG_TaskROI())
    __swig_destroy__ = _MGCore.delete_PMG_TaskROI

# Register PMG_TaskROI in _MGCore:
_MGCore.PMG_TaskROI_swigregister(PMG_TaskROI)


def MG_GetTaskROI(taskId):
    return _MGCore.MG_GetTaskROI(taskId)
class PMG_SlideMetadata(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scanObjective = property(_MGCore.PMG_SlideMetadata_scanObjective_get, _MGCore.PMG_SlideMetadata_scanObjective_set)
    tileWidth = property(_MGCore.PMG_SlideMetadata_tileWidth_get, _MGCore.PMG_SlideMetadata_tileWidth_set)
    tileHeight = property(_MGCore.PMG_SlideMetadata_tileHeight_get, _MGCore.PMG_SlideMetadata_tileHeight_set)
    calibration = property(_MGCore.PMG_SlideMetadata_calibration_get, _MGCore.PMG_SlideMetadata_calibration_set)
    imageWidth = property(_MGCore.PMG_SlideMetadata_imageWidth_get, _MGCore.PMG_SlideMetadata_imageWidth_set)
    imageHeight = property(_MGCore.PMG_SlideMetadata_imageHeight_get, _MGCore.PMG_SlideMetadata_imageHeight_set)
    imageLayers = property(_MGCore.PMG_SlideMetadata_imageLayers_get, _MGCore.PMG_SlideMetadata_imageLayers_set)

    def __init__(self):
        _MGCore.PMG_SlideMetadata_swiginit(self, _MGCore.new_PMG_SlideMetadata())
    __swig_destroy__ = _MGCore.delete_PMG_SlideMetadata

# Register PMG_SlideMetadata in _MGCore:
_MGCore.PMG_SlideMetadata_swigregister(PMG_SlideMetadata)


def MG_GetSlideMetadata(taskId, slideId):
    return _MGCore.MG_GetSlideMetadata(taskId, slideId)
class PMG_SlideAnnotation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_MGCore.PMG_SlideAnnotation_type_get, _MGCore.PMG_SlideAnnotation_type_set)
    name = property(_MGCore.PMG_SlideAnnotation_name_get, _MGCore.PMG_SlideAnnotation_name_set)
    description = property(_MGCore.PMG_SlideAnnotation_description_get, _MGCore.PMG_SlideAnnotation_description_set)
    colorR = property(_MGCore.PMG_SlideAnnotation_colorR_get, _MGCore.PMG_SlideAnnotation_colorR_set)
    colorG = property(_MGCore.PMG_SlideAnnotation_colorG_get, _MGCore.PMG_SlideAnnotation_colorG_set)
    colorB = property(_MGCore.PMG_SlideAnnotation_colorB_get, _MGCore.PMG_SlideAnnotation_colorB_set)
    regionX = property(_MGCore.PMG_SlideAnnotation_regionX_get, _MGCore.PMG_SlideAnnotation_regionX_set)
    regionY = property(_MGCore.PMG_SlideAnnotation_regionY_get, _MGCore.PMG_SlideAnnotation_regionY_set)
    regionWidth = property(_MGCore.PMG_SlideAnnotation_regionWidth_get, _MGCore.PMG_SlideAnnotation_regionWidth_set)
    regionHeight = property(_MGCore.PMG_SlideAnnotation_regionHeight_get, _MGCore.PMG_SlideAnnotation_regionHeight_set)
    pointX = property(_MGCore.PMG_SlideAnnotation_pointX_get, _MGCore.PMG_SlideAnnotation_pointX_set)
    pointY = property(_MGCore.PMG_SlideAnnotation_pointY_get, _MGCore.PMG_SlideAnnotation_pointY_set)

    def __init__(self):
        _MGCore.PMG_SlideAnnotation_swiginit(self, _MGCore.new_PMG_SlideAnnotation())
    __swig_destroy__ = _MGCore.delete_PMG_SlideAnnotation

# Register PMG_SlideAnnotation in _MGCore:
_MGCore.PMG_SlideAnnotation_swigregister(PMG_SlideAnnotation)


def MG_GetSlideAnnotation(taskId, proi):
    return _MGCore.MG_GetSlideAnnotation(taskId, proi)

def MG_AddSlideAnnotation(taskId, proi, panno):
    return _MGCore.MG_AddSlideAnnotation(taskId, proi, panno)

def MG_DeleteSlideAnnotation(taskId, proi):
    return _MGCore.MG_DeleteSlideAnnotation(taskId, proi)
class PMG_SlideObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regionX = property(_MGCore.PMG_SlideObject_regionX_get, _MGCore.PMG_SlideObject_regionX_set)
    regionY = property(_MGCore.PMG_SlideObject_regionY_get, _MGCore.PMG_SlideObject_regionY_set)
    regionWidth = property(_MGCore.PMG_SlideObject_regionWidth_get, _MGCore.PMG_SlideObject_regionWidth_set)
    regionHeight = property(_MGCore.PMG_SlideObject_regionHeight_get, _MGCore.PMG_SlideObject_regionHeight_set)
    centroidX = property(_MGCore.PMG_SlideObject_centroidX_get, _MGCore.PMG_SlideObject_centroidX_set)
    centroidY = property(_MGCore.PMG_SlideObject_centroidY_get, _MGCore.PMG_SlideObject_centroidY_set)
    pointX = property(_MGCore.PMG_SlideObject_pointX_get, _MGCore.PMG_SlideObject_pointX_set)
    pointY = property(_MGCore.PMG_SlideObject_pointY_get, _MGCore.PMG_SlideObject_pointY_set)
    groupId = property(_MGCore.PMG_SlideObject_groupId_get, _MGCore.PMG_SlideObject_groupId_set)
    confidence = property(_MGCore.PMG_SlideObject_confidence_get, _MGCore.PMG_SlideObject_confidence_set)

    def __init__(self):
        _MGCore.PMG_SlideObject_swiginit(self, _MGCore.new_PMG_SlideObject())
    __swig_destroy__ = _MGCore.delete_PMG_SlideObject

# Register PMG_SlideObject in _MGCore:
_MGCore.PMG_SlideObject_swigregister(PMG_SlideObject)


def MG_GetSlideObject(taskId, proi):
    return _MGCore.MG_GetSlideObject(taskId, proi)

def MG_AddSlideObject(taskId, proi, pobj):
    return _MGCore.MG_AddSlideObject(taskId, proi, pobj)

def MG_DeleteSlideObject(taskId, proi):
    return _MGCore.MG_DeleteSlideObject(taskId, proi)

def MG_GetSlideThumbnail(taskId, slideId, fmt, buf):
    return _MGCore.MG_GetSlideThumbnail(taskId, slideId, fmt, buf)

def MG_GetSlideLabel(taskId, slideId, fmt, buf):
    return _MGCore.MG_GetSlideLabel(taskId, slideId, fmt, buf)

def MG_GetSlideMacro(taskId, slideId, fmt, buf):
    return _MGCore.MG_GetSlideMacro(taskId, slideId, fmt, buf)

def MG_GetSlideTile(taskId, slideId, layerIndex, row, col, fmt, buf, timeout):
    return _MGCore.MG_GetSlideTile(taskId, slideId, layerIndex, row, col, fmt, buf, timeout)

def MG_GetSlideTileSVS(taskId, proi, svs):
    return _MGCore.MG_GetSlideTileSVS(taskId, proi, svs)

def MG_AllocateSlideROIByAnnotation(pa, roi, align=True, bg=255):
    return _MGCore.MG_AllocateSlideROIByAnnotation(pa, roi, align, bg)

def MG_AllocateSlideROIByTaskROI(proi, roi, align=True, bg=255):
    return _MGCore.MG_AllocateSlideROIByTaskROI(proi, roi, align, bg)

def MG_AddSlideOverlay(taskId, proi, overlay):
    return _MGCore.MG_AddSlideOverlay(taskId, proi, overlay)

def MG_DeleteSlideOverlay(taskId, proi):
    return _MGCore.MG_DeleteSlideOverlay(taskId, proi)
class MG_SlideLayer_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.MG_SlideLayer_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.MG_SlideLayer_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.MG_SlideLayer_Vector___bool__(self)

    def __len__(self):
        return _MGCore.MG_SlideLayer_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.MG_SlideLayer_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.MG_SlideLayer_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.MG_SlideLayer_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.MG_SlideLayer_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.MG_SlideLayer_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.MG_SlideLayer_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.MG_SlideLayer_Vector_pop(self)

    def append(self, x):
        return _MGCore.MG_SlideLayer_Vector_append(self, x)

    def empty(self):
        return _MGCore.MG_SlideLayer_Vector_empty(self)

    def size(self):
        return _MGCore.MG_SlideLayer_Vector_size(self)

    def swap(self, v):
        return _MGCore.MG_SlideLayer_Vector_swap(self, v)

    def begin(self):
        return _MGCore.MG_SlideLayer_Vector_begin(self)

    def end(self):
        return _MGCore.MG_SlideLayer_Vector_end(self)

    def rbegin(self):
        return _MGCore.MG_SlideLayer_Vector_rbegin(self)

    def rend(self):
        return _MGCore.MG_SlideLayer_Vector_rend(self)

    def clear(self):
        return _MGCore.MG_SlideLayer_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.MG_SlideLayer_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.MG_SlideLayer_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.MG_SlideLayer_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.MG_SlideLayer_Vector_swiginit(self, _MGCore.new_MG_SlideLayer_Vector(*args))

    def push_back(self, x):
        return _MGCore.MG_SlideLayer_Vector_push_back(self, x)

    def front(self):
        return _MGCore.MG_SlideLayer_Vector_front(self)

    def back(self):
        return _MGCore.MG_SlideLayer_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.MG_SlideLayer_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.MG_SlideLayer_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.MG_SlideLayer_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.MG_SlideLayer_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.MG_SlideLayer_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_MG_SlideLayer_Vector

# Register MG_SlideLayer_Vector in _MGCore:
_MGCore.MG_SlideLayer_Vector_swigregister(MG_SlideLayer_Vector)

class PMG_TaskROI_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.PMG_TaskROI_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.PMG_TaskROI_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.PMG_TaskROI_Vector___bool__(self)

    def __len__(self):
        return _MGCore.PMG_TaskROI_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.PMG_TaskROI_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.PMG_TaskROI_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.PMG_TaskROI_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.PMG_TaskROI_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.PMG_TaskROI_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.PMG_TaskROI_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.PMG_TaskROI_Vector_pop(self)

    def append(self, x):
        return _MGCore.PMG_TaskROI_Vector_append(self, x)

    def empty(self):
        return _MGCore.PMG_TaskROI_Vector_empty(self)

    def size(self):
        return _MGCore.PMG_TaskROI_Vector_size(self)

    def swap(self, v):
        return _MGCore.PMG_TaskROI_Vector_swap(self, v)

    def begin(self):
        return _MGCore.PMG_TaskROI_Vector_begin(self)

    def end(self):
        return _MGCore.PMG_TaskROI_Vector_end(self)

    def rbegin(self):
        return _MGCore.PMG_TaskROI_Vector_rbegin(self)

    def rend(self):
        return _MGCore.PMG_TaskROI_Vector_rend(self)

    def clear(self):
        return _MGCore.PMG_TaskROI_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.PMG_TaskROI_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.PMG_TaskROI_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.PMG_TaskROI_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.PMG_TaskROI_Vector_swiginit(self, _MGCore.new_PMG_TaskROI_Vector(*args))

    def push_back(self, x):
        return _MGCore.PMG_TaskROI_Vector_push_back(self, x)

    def front(self):
        return _MGCore.PMG_TaskROI_Vector_front(self)

    def back(self):
        return _MGCore.PMG_TaskROI_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.PMG_TaskROI_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.PMG_TaskROI_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.PMG_TaskROI_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.PMG_TaskROI_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.PMG_TaskROI_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_PMG_TaskROI_Vector

# Register PMG_TaskROI_Vector in _MGCore:
_MGCore.PMG_TaskROI_Vector_swigregister(PMG_TaskROI_Vector)

class PMG_SlideAnnotation_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.PMG_SlideAnnotation_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.PMG_SlideAnnotation_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.PMG_SlideAnnotation_Vector___bool__(self)

    def __len__(self):
        return _MGCore.PMG_SlideAnnotation_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.PMG_SlideAnnotation_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.PMG_SlideAnnotation_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.PMG_SlideAnnotation_Vector_pop(self)

    def append(self, x):
        return _MGCore.PMG_SlideAnnotation_Vector_append(self, x)

    def empty(self):
        return _MGCore.PMG_SlideAnnotation_Vector_empty(self)

    def size(self):
        return _MGCore.PMG_SlideAnnotation_Vector_size(self)

    def swap(self, v):
        return _MGCore.PMG_SlideAnnotation_Vector_swap(self, v)

    def begin(self):
        return _MGCore.PMG_SlideAnnotation_Vector_begin(self)

    def end(self):
        return _MGCore.PMG_SlideAnnotation_Vector_end(self)

    def rbegin(self):
        return _MGCore.PMG_SlideAnnotation_Vector_rbegin(self)

    def rend(self):
        return _MGCore.PMG_SlideAnnotation_Vector_rend(self)

    def clear(self):
        return _MGCore.PMG_SlideAnnotation_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.PMG_SlideAnnotation_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.PMG_SlideAnnotation_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.PMG_SlideAnnotation_Vector_swiginit(self, _MGCore.new_PMG_SlideAnnotation_Vector(*args))

    def push_back(self, x):
        return _MGCore.PMG_SlideAnnotation_Vector_push_back(self, x)

    def front(self):
        return _MGCore.PMG_SlideAnnotation_Vector_front(self)

    def back(self):
        return _MGCore.PMG_SlideAnnotation_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.PMG_SlideAnnotation_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.PMG_SlideAnnotation_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.PMG_SlideAnnotation_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.PMG_SlideAnnotation_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_PMG_SlideAnnotation_Vector

# Register PMG_SlideAnnotation_Vector in _MGCore:
_MGCore.PMG_SlideAnnotation_Vector_swigregister(PMG_SlideAnnotation_Vector)

class Float_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.Float_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.Float_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.Float_Vector___bool__(self)

    def __len__(self):
        return _MGCore.Float_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.Float_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.Float_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.Float_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.Float_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.Float_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.Float_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.Float_Vector_pop(self)

    def append(self, x):
        return _MGCore.Float_Vector_append(self, x)

    def empty(self):
        return _MGCore.Float_Vector_empty(self)

    def size(self):
        return _MGCore.Float_Vector_size(self)

    def swap(self, v):
        return _MGCore.Float_Vector_swap(self, v)

    def begin(self):
        return _MGCore.Float_Vector_begin(self)

    def end(self):
        return _MGCore.Float_Vector_end(self)

    def rbegin(self):
        return _MGCore.Float_Vector_rbegin(self)

    def rend(self):
        return _MGCore.Float_Vector_rend(self)

    def clear(self):
        return _MGCore.Float_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.Float_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.Float_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.Float_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.Float_Vector_swiginit(self, _MGCore.new_Float_Vector(*args))

    def push_back(self, x):
        return _MGCore.Float_Vector_push_back(self, x)

    def front(self):
        return _MGCore.Float_Vector_front(self)

    def back(self):
        return _MGCore.Float_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.Float_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.Float_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.Float_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.Float_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.Float_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_Float_Vector

# Register Float_Vector in _MGCore:
_MGCore.Float_Vector_swigregister(Float_Vector)

class PMG_SlideObject_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.PMG_SlideObject_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.PMG_SlideObject_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.PMG_SlideObject_Vector___bool__(self)

    def __len__(self):
        return _MGCore.PMG_SlideObject_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.PMG_SlideObject_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.PMG_SlideObject_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.PMG_SlideObject_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.PMG_SlideObject_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.PMG_SlideObject_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.PMG_SlideObject_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.PMG_SlideObject_Vector_pop(self)

    def append(self, x):
        return _MGCore.PMG_SlideObject_Vector_append(self, x)

    def empty(self):
        return _MGCore.PMG_SlideObject_Vector_empty(self)

    def size(self):
        return _MGCore.PMG_SlideObject_Vector_size(self)

    def swap(self, v):
        return _MGCore.PMG_SlideObject_Vector_swap(self, v)

    def begin(self):
        return _MGCore.PMG_SlideObject_Vector_begin(self)

    def end(self):
        return _MGCore.PMG_SlideObject_Vector_end(self)

    def rbegin(self):
        return _MGCore.PMG_SlideObject_Vector_rbegin(self)

    def rend(self):
        return _MGCore.PMG_SlideObject_Vector_rend(self)

    def clear(self):
        return _MGCore.PMG_SlideObject_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.PMG_SlideObject_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.PMG_SlideObject_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.PMG_SlideObject_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.PMG_SlideObject_Vector_swiginit(self, _MGCore.new_PMG_SlideObject_Vector(*args))

    def push_back(self, x):
        return _MGCore.PMG_SlideObject_Vector_push_back(self, x)

    def front(self):
        return _MGCore.PMG_SlideObject_Vector_front(self)

    def back(self):
        return _MGCore.PMG_SlideObject_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.PMG_SlideObject_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.PMG_SlideObject_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.PMG_SlideObject_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.PMG_SlideObject_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.PMG_SlideObject_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_PMG_SlideObject_Vector

# Register PMG_SlideObject_Vector in _MGCore:
_MGCore.PMG_SlideObject_Vector_swigregister(PMG_SlideObject_Vector)

class Int_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.Int_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.Int_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.Int_Vector___bool__(self)

    def __len__(self):
        return _MGCore.Int_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.Int_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.Int_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.Int_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.Int_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.Int_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.Int_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.Int_Vector_pop(self)

    def append(self, x):
        return _MGCore.Int_Vector_append(self, x)

    def empty(self):
        return _MGCore.Int_Vector_empty(self)

    def size(self):
        return _MGCore.Int_Vector_size(self)

    def swap(self, v):
        return _MGCore.Int_Vector_swap(self, v)

    def begin(self):
        return _MGCore.Int_Vector_begin(self)

    def end(self):
        return _MGCore.Int_Vector_end(self)

    def rbegin(self):
        return _MGCore.Int_Vector_rbegin(self)

    def rend(self):
        return _MGCore.Int_Vector_rend(self)

    def clear(self):
        return _MGCore.Int_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.Int_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.Int_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.Int_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.Int_Vector_swiginit(self, _MGCore.new_Int_Vector(*args))

    def push_back(self, x):
        return _MGCore.Int_Vector_push_back(self, x)

    def front(self):
        return _MGCore.Int_Vector_front(self)

    def back(self):
        return _MGCore.Int_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.Int_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.Int_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.Int_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.Int_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.Int_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_Int_Vector

# Register Int_Vector in _MGCore:
_MGCore.Int_Vector_swigregister(Int_Vector)

class MG_SlideOverlay_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MGCore.MG_SlideOverlay_Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MGCore.MG_SlideOverlay_Vector___nonzero__(self)

    def __bool__(self):
        return _MGCore.MG_SlideOverlay_Vector___bool__(self)

    def __len__(self):
        return _MGCore.MG_SlideOverlay_Vector___len__(self)

    def __getslice__(self, i, j):
        return _MGCore.MG_SlideOverlay_Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MGCore.MG_SlideOverlay_Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MGCore.MG_SlideOverlay_Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MGCore.MG_SlideOverlay_Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MGCore.MG_SlideOverlay_Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MGCore.MG_SlideOverlay_Vector___setitem__(self, *args)

    def pop(self):
        return _MGCore.MG_SlideOverlay_Vector_pop(self)

    def append(self, x):
        return _MGCore.MG_SlideOverlay_Vector_append(self, x)

    def empty(self):
        return _MGCore.MG_SlideOverlay_Vector_empty(self)

    def size(self):
        return _MGCore.MG_SlideOverlay_Vector_size(self)

    def swap(self, v):
        return _MGCore.MG_SlideOverlay_Vector_swap(self, v)

    def begin(self):
        return _MGCore.MG_SlideOverlay_Vector_begin(self)

    def end(self):
        return _MGCore.MG_SlideOverlay_Vector_end(self)

    def rbegin(self):
        return _MGCore.MG_SlideOverlay_Vector_rbegin(self)

    def rend(self):
        return _MGCore.MG_SlideOverlay_Vector_rend(self)

    def clear(self):
        return _MGCore.MG_SlideOverlay_Vector_clear(self)

    def get_allocator(self):
        return _MGCore.MG_SlideOverlay_Vector_get_allocator(self)

    def pop_back(self):
        return _MGCore.MG_SlideOverlay_Vector_pop_back(self)

    def erase(self, *args):
        return _MGCore.MG_SlideOverlay_Vector_erase(self, *args)

    def __init__(self, *args):
        _MGCore.MG_SlideOverlay_Vector_swiginit(self, _MGCore.new_MG_SlideOverlay_Vector(*args))

    def push_back(self, x):
        return _MGCore.MG_SlideOverlay_Vector_push_back(self, x)

    def front(self):
        return _MGCore.MG_SlideOverlay_Vector_front(self)

    def back(self):
        return _MGCore.MG_SlideOverlay_Vector_back(self)

    def assign(self, n, x):
        return _MGCore.MG_SlideOverlay_Vector_assign(self, n, x)

    def resize(self, *args):
        return _MGCore.MG_SlideOverlay_Vector_resize(self, *args)

    def insert(self, *args):
        return _MGCore.MG_SlideOverlay_Vector_insert(self, *args)

    def reserve(self, n):
        return _MGCore.MG_SlideOverlay_Vector_reserve(self, n)

    def capacity(self):
        return _MGCore.MG_SlideOverlay_Vector_capacity(self)
    __swig_destroy__ = _MGCore.delete_MG_SlideOverlay_Vector

# Register MG_SlideOverlay_Vector in _MGCore:
_MGCore.MG_SlideOverlay_Vector_swigregister(MG_SlideOverlay_Vector)



